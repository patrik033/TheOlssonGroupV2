@page "/{categoryUrl}"
@inject HttpClient httpClient
@using TheOlssonGroup.Client.PagingComponents
@using TheOlssonGroup.Client.Service.Contratct

@using static MudBlazor.CategoryTypes
@inject IMovieServiceClient movieService
@inject ICartServiceClient cartServiceClient
@using System.Net.Http.Json


<link href="_content/MudBlazor/MudBlazor.min.css" rel="stylesheet" />
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css" />

<style>
    .card {
        width: 444px;
        flex-basis: 0;
        flex-grow: 1;
    }

    body {
        background: #eee;
    }

    .title-text {
        width: 100px;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }

</style>

<MudThemeProvider />

    <MudStack Justify="Justify.SpaceEvenly" AlignItems="AlignItems.Center" Row="true" >
    <div class="d-flex flex-wrap justify-content-evenly align-items-center">
        @foreach (var item in MyMovie)
        {
        <div class="p-3 bg-white">
            <div class="about-product text-center mt-2"><img src="@item.PosterImageUrl" width="180" height="300">
                <div>
                    <h4></h4>
                    <h6 class="mt-0 text-black-50">@item.Title</h6>
                </div>
            </div>
            <div class="stats mt-2">
                <div class="d-flex justify-content-between p-price" ><span>Price</span><span>$@item.Price</span></div>
                <div class="d-flex justify-content-between p-price"><span>Genre</span><span>@item.GenreName</span></div>
             <div class="d-flex justify-content-between p-price"><span>Info</span><a href="product/@item.Id"><span><i class="bi bi-info-circle"></i></span></a></div>
             <a class="mt-5 ms-5 btn btn-outline-primary" @onclick="()=>AddItemForCheckout(item)"><i class="oi oi-cart">&nbsp;&nbsp; Add To Basket</i></a> 
            </div>
            
        </div>

        }

    </div>

        
        }
      
    

</MudStack>





@code {
    private List<MovieDtoRecord>? MyMovie = new List<MovieDtoRecord>();
    private MovieDtoRecord record;
    //private MudCarousel<MovieDtoRecord> _carousel;
    //private string message = string.Empty;
    //private int selectedIndex = 2;
    //private bool _arrows = true;
    //private bool _bullets = true;
    //private bool _autocycle = true;
    //private List<string> urls = new List<string>();
   
   
    private Movie? movie = null;
    [Parameter]
    public string? CategoryUrl { get; set; }
    //[Parameter]
    //public int Id { get; set; }
    private async Task AddItemForCheckout(MovieDtoRecord movie)
    {
        var cartItem = new CartItem
            {
                MovieId = movie.Id,
                Image = movie.PosterImageUrl,
                Price = movie.Price,
                Title = movie.Title
            };
        await cartServiceClient.AddToCart(cartItem);
    }
    protected override async Task OnParametersSetAsync()
    {
        var result = await movieService.GetMoviesAndGenresAsync(CategoryUrl);
        MyMovie = result;
       
    }
     
}
